{"version":3,"sources":["store/store.ts","TodosList.tsx","utils/helpers.ts","api.ts","App.tsx","index.tsx"],"names":["initialState","todosList","isLoading","isAlphabSortedName","isAlphabSortedTitle","isCompletedTodo","sortValue","deleteTodo","idTodo","type","prepareTodos","state","sort","a","b","user","name","localeCompare","title","Number","completed","store","createStore","action","loadingStatus","sortedTodos","filter","todo","id","isCompleted","composeWithDevTools","TodosList","props","dispatch","useDispatch","newTodos","className","map","key","ClassNames","todo__done","onClick","ensure","argument","message","undefined","TypeError","users","fetch","then","response","json","data","todos","todosFromServer","Promise","all","result","find","userId","App","useSelector","isAlphabeticallyName","isAlphabeticallyTitle","length","setState","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8cd93691.chunk.js","sourcesContent":["import { createStore, Action } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst SET_LOADING = 'SET_IS_LOADING';\nconst SET_STATE = 'SET_STATE';\nconst DELETE = 'DELETE';\nconst SORTED_TITLE = 'SORTED_TITLE';\nconst SORTED_NAME = 'SORTED_NAME';\nconst SORTED_COMPLETED = 'SORTED_COMPLETED';\n\ntype LoadingAction = Action<typeof SET_LOADING> & {\n  loadingStatus: boolean;\n};\ntype SetStateAction = Action<typeof SET_STATE> & {\n  todosList: TodoWithUser[];\n  loadingStatus: boolean;\n};\nexport type DeleteTodo = Action<typeof DELETE> & {\n  idTodo: number;\n};\ntype SortedName = Action<typeof SORTED_NAME> & {\n  sortValue: string;\n  isAlphabSortedName: boolean;\n};\ntype SortedTitle = Action<typeof SORTED_TITLE> & {\n  sortValue: string;\n  isAlphabSortedTitle: boolean;\n};\ntype SortedCompleted = Action<typeof SORTED_COMPLETED> & {\n  sortValue: string;\n  isCompleted: boolean;\n};\n\nexport type InitialState = {\n  todosList: TodoWithUser[];\n  isLoading: boolean;\n  isAlphabSortedName: boolean;\n  isAlphabSortedTitle: boolean;\n  isCompletedTodo: boolean;\n  sortValue: string | null;\n};\n\n\nconst initialState: InitialState = {\n  todosList: [],\n  isLoading: false,\n  isAlphabSortedName: false,\n  isAlphabSortedTitle: false,\n  isCompletedTodo: false,\n  sortValue: null,\n};\n\nexport const loading = (loadingStatus: boolean): LoadingAction => (\n  {\n    type: SET_LOADING,\n    loadingStatus,\n  }\n);\n\nexport const setState = (\n  todosList: TodoWithUser[],\n  loadingStatus: boolean,\n): SetStateAction => (\n  {\n    type: SET_STATE,\n    todosList,\n    loadingStatus,\n  }\n);\n\nexport const setSortName = (\n  sortValue: string,\n  isAlphabSortedName: boolean,\n): SortedName => (\n  {\n    type: SORTED_NAME,\n    sortValue,\n    isAlphabSortedName,\n  }\n);\nexport const setSortTitle = (\n  sortValue: string,\n  isAlphabSortedTitle: boolean,\n): SortedTitle => (\n  {\n    type: SORTED_TITLE,\n    sortValue,\n    isAlphabSortedTitle,\n  }\n);\nexport const setSortCompleted = (\n  sortValue: string,\n  isCompleted: boolean,\n): SortedCompleted => (\n  {\n    type: SORTED_COMPLETED,\n    sortValue,\n    isCompleted,\n  }\n);\n\nexport const deleteTodo = (idTodo: number): DeleteTodo => (\n  {\n    type: DELETE,\n    idTodo,\n  }\n);\n\nexport type AllActions = LoadingAction\n| SetStateAction\n| DeleteTodo\n| SortedTitle\n| SortedName\n| SortedCompleted;\n\nconst todoListReducer = (state = initialState, action: AllActions) => {\n  switch (action.type) {\n    case SET_LOADING: return {\n      ...state,\n      isLoading: action.loadingStatus,\n    };\n    case SET_STATE: return {\n      ...state,\n      todosList: action.todosList,\n      isLoading: action.loadingStatus,\n      sortedTodos: action.todosList,\n    };\n    case DELETE: return {\n      ...state,\n      todosList: state.todosList.filter(todo => todo.id !== action.idTodo),\n    };\n    case SORTED_NAME: return {\n      ...state,\n      sortValue: action.sortValue,\n      isAlphabSortedName: !action.isAlphabSortedName,\n      isAlphabSortedTitle: false,\n      isCompletedTodo: false,\n    };\n    case SORTED_TITLE: return {\n      ...state,\n      sortValue: action.sortValue,\n      isAlphabSortedTitle: !action.isAlphabSortedTitle,\n      isAlphabSortedName: false,\n      isCompletedTodo: false,\n    };\n    case SORTED_COMPLETED: return {\n      ...state,\n      sortValue: action.sortValue,\n      isCompletedTodo: !action.isCompleted,\n      isAlphabSortedTitle: false,\n      isAlphabSortedName: false,\n    };\n    default: return state;\n  }\n};\n\nexport const prepareTodos = (state: InitialState): TodoWithUser[] => {\n  switch (state.sortValue) {\n    case SORTED_NAME:\n      if (!state.isAlphabSortedName) {\n        return [...state.todosList]\n          .sort((a, b) => a.user.name.localeCompare(b.user.name));\n      }\n\n      return [...state.todosList]\n        .sort((a, b) => b.user.name.localeCompare(a.user.name));\n    case SORTED_TITLE:\n      if (!state.isAlphabSortedTitle) {\n        return [...state.todosList]\n          .sort((a, b) => a.title.localeCompare(b.title));\n      }\n\n      return [...state.todosList]\n        .sort((a, b) => b.title.localeCompare(a.title));\n    case SORTED_COMPLETED:\n      if (!state.isCompletedTodo) {\n        return [...state.todosList]\n          .sort((a, b) => Number(a.completed) - Number(b.completed));\n      }\n\n      return [...state.todosList]\n        .sort((a, b) => Number(b.completed) - Number(a.completed));\n    default: return state.todosList;\n  }\n};\n\nconst store = createStore(todoListReducer, composeWithDevTools());\n\nexport default store;\n","import React, { Dispatch } from 'react';\nimport { useDispatch } from 'react-redux';\nimport ClassNames from 'classnames';\nimport { AllActions, DeleteTodo } from './store/store';\nimport './todo.scss';\n\ntype Props = {\n  newTodos: TodoWithUser[];\n  deleteTodo(argument: number): DeleteTodo;\n};\n\nconst TodosList: React.FC<Props> = (props) => {\n  const dispatch = useDispatch<Dispatch<AllActions>>();\n  const { newTodos, deleteTodo } = props;\n\n  return (\n    <div className=\"todo\">\n      {newTodos.map(todo => (\n        <div key={todo.id} className=\"todo__wrapper\">\n          <p className=\"todo__body\">\n            <span className=\"todo__user\">\n              <strong>\n                {todo.user.name}\n              </strong>\n            </span>\n            :\n            {' '}\n            {todo.title}\n          </p>\n          <div className={ClassNames('todo__process', {\n            todo__done: todo.completed,\n          })}\n          >\n            Completed:\n            {' '}\n            {todo.completed ? 'Done' : 'In the process'}\n          </div>\n          <button\n            type=\"button\"\n            onClick={() => {\n              dispatch(deleteTodo(todo.id));\n            }}\n          >\n            delete\n          </button>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default TodosList;\n","export function ensure<T>(\n  argument: T | undefined | null,\n  message = 'This value was promised to be there.',\n): T {\n  if (argument === undefined || argument === null) {\n    throw new TypeError(message);\n  }\n\n  return argument;\n}\n","import { ensure } from './utils/helpers';\n\nconst USERS_API = 'https://jsonplaceholder.typicode.com/users';\nconst TODOS_API = 'https://jsonplaceholder.typicode.com/todos';\n\nconst users = fetch(USERS_API)\n  .then((response): Promise<User[]> => response.json()\n    .then(data => {\n      return data;\n    }));\nconst todos = fetch(TODOS_API)\n  .then((response): Promise<Todo[]> => response.json()\n    .then(data => {\n      return data;\n    }));\n\nexport const todosFromServer = Promise.all<User[], Todo[]>([users, todos])\n  .then(result => {\n    return result[1].map((todo: Todo) => (\n      {\n        ...todo,\n        user: ensure(result[0].find((user: User) => (\n          user.id === todo.userId\n        ))),\n      }\n    ));\n  });\n","import React, { Dispatch } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport TodosList from './TodosList';\nimport './App.scss';\nimport { todosFromServer } from './api';\nimport {\n  AllActions,\n  InitialState,\n  loading,\n  setState,\n  deleteTodo,\n  prepareTodos,\n  setSortName,\n  setSortTitle,\n  setSortCompleted,\n} from './store/store';\n\nconst App = () => {\n  const dispatch = useDispatch<Dispatch<AllActions>>();\n  const todosList = useSelector((state: InitialState) => state.todosList);\n  const todos = useSelector(prepareTodos);\n  const isLoading = useSelector((state: InitialState) => state.isLoading);\n  const isAlphabeticallyName = useSelector((state: InitialState) => state.isAlphabSortedName);\n  const isAlphabeticallyTitle = useSelector((state: InitialState) => state.isAlphabSortedTitle);\n  const isCompletedTodo = useSelector((state: InitialState) => state.isCompletedTodo);\n\n  const fetchData = (): void => {\n    dispatch(loading(true));\n    todosFromServer.then(data => {\n      dispatch(setState(data, false));\n    });\n  };\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"app__header\">Dynamic list of TODOs</h1>\n      {todosList.length > 0 && (\n        <div className=\"app__button-filter\">\n          <button\n            type=\"button\"\n            onClick={() => dispatch(setSortName('SORTED_NAME', isAlphabeticallyName))}\n            className=\"app__button\"\n          >\n            Filter by name\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => dispatch(setSortTitle('SORTED_TITLE', isAlphabeticallyTitle))}\n            className=\"app__button\"\n          >\n            Filter by title\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => dispatch(setSortCompleted('SORTED_COMPLETED', isCompletedTodo))}\n            className=\"app__button\"\n          >\n            Filter by complete\n          </button>\n        </div>\n      )}\n      <TodosList\n        newTodos={todos}\n        deleteTodo={deleteTodo}\n      />\n      {todosList.length === 0\n      && (\n        <button\n          type=\"button\"\n          onClick={fetchData}\n          className=\"app__button\"\n        >\n          {isLoading ? 'Loading...' : 'Get Todo'}\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store/store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}