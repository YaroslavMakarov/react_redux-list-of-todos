{"version":3,"sources":["store/store.ts","TodosList.tsx","utils/helpers.ts","API.ts","App.tsx","index.tsx"],"names":["initialState","todosList","isLoading","isAlphabeticallyName","isAlphabeticallyTitle","isCompletedTodo","alphabeticallyName","alphabeticallyNameStatus","type","alphabeticallyTitle","alphabeticallyTitleStatus","completedTodo","completedTodoStatus","deleteTodo","idTodo","store","createStore","state","action","loadingStatus","filter","todo","id","composeWithDevTools","TodosList","props","dispatch","useDispatch","newTodos","className","map","key","user","name","title","ClassNames","todo__done","completed","onClick","ensure","argument","message","undefined","TypeError","users","fetch","then","response","json","data","todos","todosFromServer","Promise","all","result","find","userId","App","useSelector","sortedTodos","length","sort","a","b","localeCompare","Number","setState","Root","ReactDOM","render","document","getElementById"],"mappings":"mSAuCMA,EAA6B,CACjCC,UAAW,GACXC,WAAW,EACXC,sBAAsB,EACtBC,uBAAuB,EACvBC,iBAAiB,GAkBNC,EAAqB,SAACC,GAAD,MAChC,CACEC,KA3D+B,6BA4D/BD,6BAISE,EAAsB,SAACC,GAAD,MACjC,CACEF,KAjEgC,8BAkEhCE,8BAISC,EAAgB,SAACC,GAAD,MAC3B,CACEJ,KAvEqB,mBAwErBI,wBAISC,EAAa,SAACC,GAAD,MACxB,CACEN,KA7EW,SA8EXM,WAkDWC,EAFDC,uBArCU,WAA+C,IAA9CC,EAA6C,uDAArCjB,EAAckB,EAAuB,uCACpE,OAAQA,EAAOV,MACb,IAhGgB,iBAgGE,OAAO,2BACpBS,GADa,IAEhBf,UAAWgB,EAAOC,gBAEpB,IAnGc,YAmGE,OAAO,2BAClBF,GADW,IAEdhB,UAAWiB,EAAOjB,UAClBC,UAAWgB,EAAOC,gBAEpB,IAvG+B,6BAuGE,OAAO,2BACnCF,GAD4B,IAE/Bd,qBAAsBe,EAAOX,yBAC7BH,uBAAuB,EACvBC,iBAAiB,IAEnB,IA5GgC,8BA4GE,OAAO,2BACpCY,GAD6B,IAEhCb,sBAAuBc,EAAOR,0BAC9BP,sBAAsB,EACtBE,iBAAiB,IAEnB,IAjHqB,mBAiHE,OAAO,2BACzBY,GADkB,IAErBZ,gBAAiBa,EAAON,oBACxBR,uBAAuB,EACvBD,sBAAsB,IAExB,IAtHW,SAsHE,OAAO,2BACfc,GADQ,IAEXhB,UAAWgB,EAAMhB,UAAUmB,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAOJ,EAAOJ,YAE/D,QAAS,OAAOG,KAIuBM,iC,yBCnF5BC,G,MAxCoB,SAACC,GAClC,IAAMC,EAAWC,cACTC,EAAyBH,EAAzBG,SAAUf,EAAeY,EAAfZ,WAElB,OACE,yBAAKgB,UAAU,QACZD,EAASE,KAAI,SAAAT,GAAI,OAChB,yBAAKU,IAAKV,EAAKC,GAAIO,UAAU,iBAC3B,uBAAGA,UAAU,cACX,0BAAMA,UAAU,cACd,gCACGR,EAAKW,KAAKC,OAHjB,IAOG,IACAZ,EAAKa,OAER,yBAAKL,UAAWM,IAAW,gBAAiB,CAC1CC,WAAYf,EAAKgB,aADnB,aAKG,IACAhB,EAAKgB,UAAY,OAAS,kBAE7B,4BACE7B,KAAK,SACL8B,QAAS,WACPZ,EAASb,EAAWQ,EAAKC,OAH7B,iB,MCrCH,SAASiB,EACdC,GAEI,IADJC,EACG,uDADO,uCAEV,QAAiBC,IAAbF,GAAuC,OAAbA,EAC5B,MAAM,IAAIG,UAAUF,GAGtB,OAAOD,ECNT,IAGMI,EAAQC,MAHI,8CAIfC,MAAK,SAACC,GAAD,OAA+BA,EAASC,OAC3CF,MAAK,SAAAG,GACJ,OAAOA,QAEPC,EAAQL,MAPI,8CAQfC,MAAK,SAACC,GAAD,OAA+BA,EAASC,OAC3CF,MAAK,SAAAG,GACJ,OAAOA,QAGAE,EAAkBC,QAAQC,IAAoB,CAACT,EAAOM,IAChEJ,MAAK,SAAAQ,GACJ,OAAOA,EAAO,GAAGxB,KAAI,SAACT,GAAD,mBAAC,eAEfA,GAFc,IAGjBW,KAAMO,EAAOe,EAAO,GAAGC,MAAK,SAACvB,GAAD,OAC1BA,EAAKV,KAAOD,EAAKmC,mBC0FZC,EAlGH,WACV,IAAM/B,EAAWC,cACX1B,EAAYyD,aAAY,SAACzC,GAAD,OAAyBA,EAAMhB,aACvDC,EAAYwD,aAAY,SAACzC,GAAD,OAAyBA,EAAMf,aACvDC,EAAuBuD,aAAY,SAACzC,GAAD,OAAyBA,EAAMd,wBAClEC,EAAwBsD,aAAY,SAACzC,GAAD,OAAyBA,EAAMb,yBACnEC,EAAkBqD,aAAY,SAACzC,GAAD,OAAyBA,EAAMZ,mBAS/DsD,EAA2B,YAAO1D,GAqCtC,OACE,yBAAK4B,UAAU,OACb,wBAAIA,UAAU,eAAd,yBACC5B,EAAU2D,OAAS,GAClB,yBAAK/B,UAAU,sBACb,4BACErB,KAAK,SACL8B,QA3CY,WACpB,OAAKnC,GAMLwD,EAAc1D,EAAU4D,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAE/B,KAAKC,KAAK+B,cAAcF,EAAE9B,KAAKC,SAEjEP,EAASpB,GAAmB,MAPjCqD,EAAc1D,EAAU4D,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE9B,KAAKC,KAAK+B,cAAcD,EAAE/B,KAAKC,SAEjEP,EAASpB,GAAmB,MAwC7BuB,UAAU,eAHZ,kBAOA,4BACErB,KAAK,SACL8B,QAtCY,WACpB,OAAKlC,GAMLuD,EAAc1D,EAAU4D,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAE7B,MAAM8B,cAAcF,EAAE5B,UAExDR,EAASjB,GAAoB,MAPlCkD,EAAc1D,EAAU4D,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE5B,MAAM8B,cAAcD,EAAE7B,UAExDR,EAASjB,GAAoB,MAmC9BoB,UAAU,eAHZ,mBAOA,4BACErB,KAAK,SACL8B,QAjCgB,WACxB,OAAKjC,GAMLsD,EAAc1D,EAAU4D,MAAK,SAACC,EAAGC,GAAJ,OAAUE,OAAOF,EAAE1B,WAAa4B,OAAOH,EAAEzB,cAE/DX,EAASf,GAAc,MAP5BgD,EAAc1D,EAAU4D,MAAK,SAACC,EAAGC,GAAJ,OAAUE,OAAOH,EAAEzB,WAAa4B,OAAOF,EAAE1B,cAE/DX,EAASf,GAAc,MA8BxBkB,UAAU,eAHZ,uBASJ,kBAAC,EAAD,CACED,SAAU+B,EACV9C,WAAYA,IAEQ,IAArBZ,EAAU2D,QAET,4BACEpD,KAAK,SACL8B,QAhFU,WAChBZ,EJyBF,CACElB,KA9CgB,iBA+ChBW,eI3BiB,IACjBgC,EAAgBL,MAAK,SAAAG,GACnBvB,EJ6BkB,SAACzB,EAA2BkB,GAA5B,MACtB,CACEX,KApDc,YAqDdP,YACAkB,iBIjCW+C,CAASjB,GAAM,QA8EpBpB,UAAU,eAET3B,EAAY,aAAe,cChGhCiE,EAAO,kBACX,kBAAC,IAAD,CAAUpD,MAAOA,GACf,kBAAC,EAAD,QAIJqD,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,W","file":"static/js/main.82747911.chunk.js","sourcesContent":["import { createStore, Action } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst SET_LOADING = 'SET_IS_LOADING';\nconst SET_STATE = 'SET_STATE';\nconst CHANGE_ALPHABETICALLY_NAME = 'SET_IS_ALPHABETICALLY_NAME';\nconst CHANGE_ALPHABETICALLY_TITLE = 'SET_IS_ALPHABETICALLY_TITLE';\nconst CHANGE_COMPLETED = 'SET_IS_COMPLETED';\nconst DELETE = 'DELETE';\n\ntype LoadingAction = Action<typeof SET_LOADING> & {\n  loadingStatus: boolean;\n};\ntype SetStateAction = Action<typeof SET_STATE> & {\n  todosList: TodoWithUser[];\n  loadingStatus: boolean;\n};\ntype AlphabeticallyNameAction = Action<typeof CHANGE_ALPHABETICALLY_NAME> & {\n  alphabeticallyNameStatus: boolean;\n};\ntype AlphabeticallyTitleAction = Action<typeof CHANGE_ALPHABETICALLY_TITLE> & {\n  alphabeticallyTitleStatus: boolean;\n};\ntype CompletedTodoAction = Action<typeof CHANGE_COMPLETED> & {\n  completedTodoStatus: boolean;\n};\nexport type DeleteTodo = Action<typeof DELETE> & {\n  idTodo: number;\n};\n\nexport type InitialState = {\n  todosList: TodoWithUser[];\n  isLoading: boolean;\n  isAlphabeticallyName: boolean;\n  isAlphabeticallyTitle: boolean;\n  isCompletedTodo: boolean;\n};\n\n\nconst initialState: InitialState = {\n  todosList: [],\n  isLoading: false,\n  isAlphabeticallyName: false,\n  isAlphabeticallyTitle: false,\n  isCompletedTodo: false,\n};\n\nexport const loading = (loadingStatus: boolean): LoadingAction => (\n  {\n    type: SET_LOADING,\n    loadingStatus,\n  }\n);\n\nexport const setState = (todosList: TodoWithUser[], loadingStatus: boolean): SetStateAction => (\n  {\n    type: SET_STATE,\n    todosList,\n    loadingStatus,\n  }\n);\n\nexport const alphabeticallyName = (alphabeticallyNameStatus: boolean): AlphabeticallyNameAction => (\n  {\n    type: CHANGE_ALPHABETICALLY_NAME,\n    alphabeticallyNameStatus,\n  }\n);\n\nexport const alphabeticallyTitle = (alphabeticallyTitleStatus: boolean): AlphabeticallyTitleAction => (\n  {\n    type: CHANGE_ALPHABETICALLY_TITLE,\n    alphabeticallyTitleStatus,\n  }\n);\n\nexport const completedTodo = (completedTodoStatus: boolean): CompletedTodoAction => (\n  {\n    type: CHANGE_COMPLETED,\n    completedTodoStatus,\n  }\n);\n\nexport const deleteTodo = (idTodo: number): DeleteTodo => (\n  {\n    type: DELETE,\n    idTodo,\n  }\n);\n\nexport type AllActions = LoadingAction\n| SetStateAction\n| AlphabeticallyNameAction\n| AlphabeticallyTitleAction\n| CompletedTodoAction\n| DeleteTodo;\n\nconst todoListReducer = (state = initialState, action: AllActions) => {\n  switch (action.type) {\n    case SET_LOADING: return {\n      ...state,\n      isLoading: action.loadingStatus,\n    };\n    case SET_STATE: return {\n      ...state,\n      todosList: action.todosList,\n      isLoading: action.loadingStatus,\n    };\n    case CHANGE_ALPHABETICALLY_NAME: return {\n      ...state,\n      isAlphabeticallyName: action.alphabeticallyNameStatus,\n      isAlphabeticallyTitle: false,\n      isCompletedTodo: false,\n    };\n    case CHANGE_ALPHABETICALLY_TITLE: return {\n      ...state,\n      isAlphabeticallyTitle: action.alphabeticallyTitleStatus,\n      isAlphabeticallyName: false,\n      isCompletedTodo: false,\n    };\n    case CHANGE_COMPLETED: return {\n      ...state,\n      isCompletedTodo: action.completedTodoStatus,\n      isAlphabeticallyTitle: false,\n      isAlphabeticallyName: false,\n    };\n    case DELETE: return {\n      ...state,\n      todosList: state.todosList.filter(todo => todo.id !== action.idTodo),\n    };\n    default: return state;\n  }\n};\n\nconst store = createStore(todoListReducer, composeWithDevTools());\n\nexport default store;\n","import React, { Dispatch } from 'react';\nimport { useDispatch } from 'react-redux';\nimport ClassNames from 'classnames';\nimport { AllActions, DeleteTodo } from './store/store';\nimport './todo.scss';\n\ntype Props = {\n  newTodos: TodoWithUser[];\n  deleteTodo(argument: number): DeleteTodo;\n};\n\nconst TodosList: React.FC<Props> = (props) => {\n  const dispatch = useDispatch<Dispatch<AllActions>>();\n  const { newTodos, deleteTodo } = props;\n\n  return (\n    <div className=\"todo\">\n      {newTodos.map(todo => (\n        <div key={todo.id} className=\"todo__wrapper\">\n          <p className=\"todo__body\">\n            <span className=\"todo__user\">\n              <strong>\n                {todo.user.name}\n              </strong>\n            </span>\n            :\n            {' '}\n            {todo.title}\n          </p>\n          <div className={ClassNames('todo__process', {\n            todo__done: todo.completed,\n          })}\n          >\n            Completed:\n            {' '}\n            {todo.completed ? 'Done' : 'In the process'}\n          </div>\n          <button\n            type=\"button\"\n            onClick={() => {\n              dispatch(deleteTodo(todo.id));\n            }}\n          >\n            delete\n          </button>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default TodosList;\n","export function ensure<T>(\n  argument: T | undefined | null,\n  message = 'This value was promised to be there.',\n): T {\n  if (argument === undefined || argument === null) {\n    throw new TypeError(message);\n  }\n\n  return argument;\n}\n","import { ensure } from './utils/helpers';\n\nconst USERS_API = 'https://jsonplaceholder.typicode.com/users';\nconst TODOS_API = 'https://jsonplaceholder.typicode.com/todos';\n\nconst users = fetch(USERS_API)\n  .then((response): Promise<User[]> => response.json()\n    .then(data => {\n      return data;\n    }));\nconst todos = fetch(TODOS_API)\n  .then((response): Promise<Todo[]> => response.json()\n    .then(data => {\n      return data;\n    }));\n\nexport const todosFromServer = Promise.all<User[], Todo[]>([users, todos])\n  .then(result => {\n    return result[1].map((todo: Todo) => (\n      {\n        ...todo,\n        user: ensure(result[0].find((user: User) => (\n          user.id === todo.userId\n        ))),\n      }\n    ));\n  });\n","import React, { Dispatch } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport TodosList from './TodosList';\nimport './App.scss';\nimport { todosFromServer } from './API';\nimport {\n  AllActions,\n  alphabeticallyName, alphabeticallyTitle, completedTodo,\n  InitialState,\n  loading,\n  setState,\n  deleteTodo,\n} from './store/store';\n\nconst App = () => {\n  const dispatch = useDispatch<Dispatch<AllActions>>();\n  const todosList = useSelector((state: InitialState) => state.todosList);\n  const isLoading = useSelector((state: InitialState) => state.isLoading);\n  const isAlphabeticallyName = useSelector((state: InitialState) => state.isAlphabeticallyName);\n  const isAlphabeticallyTitle = useSelector((state: InitialState) => state.isAlphabeticallyTitle);\n  const isCompletedTodo = useSelector((state: InitialState) => state.isCompletedTodo);\n\n  const fetchData = (): void => {\n    dispatch(loading(true));\n    todosFromServer.then(data => {\n      dispatch(setState(data, false));\n    });\n  };\n\n  let sortedTodos: TodoWithUser[] = [...todosList];\n  const sortedOfNames = () => {\n    if (!isAlphabeticallyName) {\n      sortedTodos = todosList.sort((a, b) => a.user.name.localeCompare(b.user.name));\n\n      return dispatch(alphabeticallyName(true));\n    }\n\n    sortedTodos = todosList.sort((a, b) => b.user.name.localeCompare(a.user.name));\n\n    return dispatch(alphabeticallyName(false));\n  };\n\n  const sortedOfTitle = () => {\n    if (!isAlphabeticallyTitle) {\n      sortedTodos = todosList.sort((a, b) => a.title.localeCompare(b.title));\n\n      return dispatch(alphabeticallyTitle(true));\n    }\n\n    sortedTodos = todosList.sort((a, b) => b.title.localeCompare(a.title));\n\n    return dispatch(alphabeticallyTitle(false));\n  };\n\n  const sortedOfCompleted = () => {\n    if (!isCompletedTodo) {\n      sortedTodos = todosList.sort((a, b) => Number(a.completed) - Number(b.completed));\n\n      return dispatch(completedTodo(true));\n    }\n\n    sortedTodos = todosList.sort((a, b) => Number(b.completed) - Number(a.completed));\n\n    return dispatch(completedTodo(false));\n  };\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"app__header\">Dynamic list of TODOs</h1>\n      {todosList.length > 0 && (\n        <div className=\"app__button-filter\">\n          <button\n            type=\"button\"\n            onClick={sortedOfNames}\n            className=\"app__button\"\n          >\n            Filter by name\n          </button>\n          <button\n            type=\"button\"\n            onClick={sortedOfTitle}\n            className=\"app__button\"\n          >\n            Filter by title\n          </button>\n          <button\n            type=\"button\"\n            onClick={sortedOfCompleted}\n            className=\"app__button\"\n          >\n            Filter by complete\n          </button>\n        </div>\n      )}\n      <TodosList\n        newTodos={sortedTodos}\n        deleteTodo={deleteTodo}\n      />\n      {todosList.length === 0\n      && (\n        <button\n          type=\"button\"\n          onClick={fetchData}\n          className=\"app__button\"\n        >\n          {isLoading ? 'Loading...' : 'Get Todo'}\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store/store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}